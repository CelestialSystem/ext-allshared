"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._getDefaultVars = _getDefaultVars;
exports._extractFromSource = _extractFromSource;
exports._toProd = _toProd;
exports._toDev = _toDev;
exports._getAllComponents = _getAllComponents;
exports._writeFilesToProdFolder = _writeFilesToProdFolder;

var _allComponents = _interopRequireDefault(require("./allComponents"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getDefaultVars() {
  return {
    touchFile: '/src/themer.js',
    watchStarted: false,
    buildstep: '1 of 1',
    firstTime: true,
    firstCompile: true,
    browserCount: 0,
    manifest: null,
    extPath: 'ext',
    pluginErrors: [],
    deps: [],
    usedExtComponents: [],
    rebuild: true
  };
}

function _extractFromSource(module, options, compilation) {
  const logv = require('./pluginUtil').logv;

  const verbose = options.verbose;
  logv(verbose, 'FUNCTION _extractFromSource');
  var js = module._source._value;
  logv(verbose, module.resource);
  var statements = [];

  var generate = require("@babel/generator").default;

  var parse = require("babylon").parse;

  var traverse = require("ast-traverse");

  var ast = parse(js, {
    plugins: ['typescript', 'flow', 'doExpressions', 'objectRestSpread', 'classProperties', 'exportDefaultFrom', 'exportExtensions', 'asyncGenerators', 'functionBind', 'functionSent', 'dynamicImport'],
    sourceType: 'module'
  });
  traverse(ast, {
    pre: function (node) {
      if (node.type === 'CallExpression' && node.callee && node.callee.object && node.callee.object.name === 'Ext') {
        statements.push(generate(node).code);
      }

      if (node.type === 'StringLiteral') {
        let code = node.value;

        for (var i = 0; i < code.length; ++i) {
          if (code.charAt(i) == '<') {
            if (code.substr(i, 4) == '<!--') {
              i += 4;
              i += code.substr(i).indexOf('-->') + 3;
            } else if (code.charAt(i + 1) !== '/') {
              var start = code.substring(i);
              var end = getEnd(start, [' ', '\n', '>']);
              var xtype = start.substring(1, end);

              if (_allComponents.default.includes(xtype)) {
                xtype = xtype.substring(4, end);
                var theValue = node.value.toLowerCase();

                if (theValue.indexOf('doctype html') == -1) {
                  var config = `Ext.create(${JSON.stringify({
                    xtype: xtype
                  })})`;

                  if (statements.indexOf(config) === -1) {
                    statements.push(config);
                  }
                }
              }

              i += end;
            }
          }
        }

        const xtypeRepetitons = (code.match(/xtype/g) || []).length;

        if (xtypeRepetitons > 0) {
          for (var j = 0; j < xtypeRepetitons; j++) {
            var start = code.substring(code.indexOf('xtype') + 5);
            var ifAsProps = start.indexOf(':');
            var ifAsAttribute = start.indexOf('=');
            start = start.substring(Math.min(ifAsProps, ifAsAttribute) + 1);
            var end = getEnd(start, [' ', '\n', '>', '}']);
            var xtype = start.substring(1, end).trim().replace(/['"]/g, '');
            var config = `Ext.create(${JSON.stringify({
              xtype: xtype
            })})`;

            if (_allComponents.default.includes('ext-' + xtype) && statements.indexOf(config) === -1) {
              statements.push(config);
            }
          }
        }
      }
    }
  });
  return statements;
}

function _toProd(vars, options) {
  const logv = require('./pluginUtil').logv;

  logv(options.verbose, 'FUNCTION _toProd (empty');

  try {} catch (e) {
    console.log(e);
    return [];
  }
}

function _toDev(vars, options) {
  try {} catch (e) {
    console.log(e);
    return [];
  }
}

function _getAllComponents(vars, options) {
  const logv = require('./pluginUtil').logv;

  logv(options.verbose, 'FUNCTION _getAllComponents (empty)');

  try {
    var extComponents = [];
    return extComponents;
  } catch (e) {
    console.log(e);
    return [];
  }
}

function _writeFilesToProdFolder(vars, options) {
  const logv = require('./pluginUtil').logv;

  logv(options.verbose, 'FUNCTION _writeFilesToProdFolder (empty)');

  try {} catch (e) {
    console.log(e);
  }
}

function getEnd(start, setOfSymbolsToCheck) {
  var endingsArr = [];

  for (var i = 0; i < setOfSymbolsToCheck.length; i++) {
    var symbolIndex = start.indexOf(setOfSymbolsToCheck[i]);

    if (symbolIndex !== -1) {
      endingsArr.push(symbolIndex);
    }
  }

  return Math.min(...endingsArr);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,