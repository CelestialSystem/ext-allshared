'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const v = require('./pluginUtil').logv;

class ExtWebpackPlugin {
  constructor(options) {
    this.plugin = require(`./pluginUtil`)._constructor(options);
  }

  apply(compiler) {
    const vars = this.plugin.vars;
    const options = this.plugin.options;
    v(options, 'FUNCTION apply');

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      v(options, 'HOOK thisCompilation');

      require(`./pluginUtil`)._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
      }
    });

    if (vars.pluginErrors.length > 0) {
      return;
    }

    if (vars.framework == 'extjs') {
      compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
        v(options, 'HOOK compilation (empty)');
      });
      compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
        v(options, 'HOOK afterCompile');

        require(`./extjsUtil`)._afterCompile(compilation, vars, options);
      });
    } else {
      compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
        v(options, 'HOOK compilation');

        require(`./pluginUtil`)._compilation(compiler, compilation, vars, options);
      });
      compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
        v(options, 'HOOK afterCompile');

        require(`./pluginUtil`)._afterCompile(compiler, compilation, vars, options);
      });
    }

    if (options.treeshake == true && options.environment == 'production' || options.treeshake == false && options.environment != 'production') {
      compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
        v(options, 'HOOK emit');

        require(`./pluginUtil`).emit(compiler, compilation, vars, options, callback);
      });
    }

    compiler.hooks.done.tap(`ext-done`, () => {
      v(options, 'HOOK done');

      require(`./pluginUtil`)._done(vars, options);

      require('./pluginUtil').log(vars.app + `Completed ext-webpack-plugin processing`);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwidiIsImxvZ3YiLCJFeHRXZWJwYWNrUGx1Z2luIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicGx1Z2luIiwiX2NvbnN0cnVjdG9yIiwiYXBwbHkiLCJjb21waWxlciIsInZhcnMiLCJob29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsIl90aGlzQ29tcGlsYXRpb24iLCJwbHVnaW5FcnJvcnMiLCJsZW5ndGgiLCJlcnJvcnMiLCJwdXNoIiwiRXJyb3IiLCJqb2luIiwiZnJhbWV3b3JrIiwiYWZ0ZXJDb21waWxlIiwiX2FmdGVyQ29tcGlsZSIsIl9jb21waWxhdGlvbiIsInRyZWVzaGFrZSIsImVudmlyb25tZW50IiwiZW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJkb25lIiwiX2RvbmUiLCJhcHAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBQ0FBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QkUsSUFBbEM7O0FBQ2UsTUFBTUMsZ0JBQU4sQ0FBdUI7QUFDcENDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtDLE1BQUwsR0FBY04sT0FBTyxDQUFFLGNBQUYsQ0FBUCxDQUF3Qk8sWUFBeEIsQ0FBcUNGLE9BQXJDLENBQWQ7QUFDRDs7QUFFREcsRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNQyxJQUFJLEdBQUcsS0FBS0osTUFBTCxDQUFZSSxJQUF6QjtBQUNBLFVBQU1MLE9BQU8sR0FBRyxLQUFLQyxNQUFMLENBQVlELE9BQTVCO0FBQ0FKLElBQUFBLENBQUMsQ0FBQ0ksT0FBRCxFQUFTLGdCQUFULENBQUQ7O0FBQ0EsUUFBSSxDQUFDSSxRQUFRLENBQUNFLEtBQWQsRUFBcUI7QUFBQ0MsTUFBQUEsT0FB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V0FBdkMsRUFBb0ROLElBQXBELEVBQTBETCxPQUExRCxFQUFtRTJCLFFBQW5FO0FBQ0QsT0FIRDtBQUlEOztBQUVEdkIsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVzQixJQUFmLENBQW9CbEIsR0FBcEIsQ0FBeUIsVUFBekIsRUFBb0MsTUFBTTtBQUN4Q2QsTUFBQUEsQ0FBQyxDQUFDSSxPQUFELEVBQVMsV0FBVCxDQUFEOztBQUNBTCxNQUFBQSxPQUFPLENBQUUsY0FBRixDQUFQLENBQXdCa0MsS0FBeEIsQ0FBOEJ4QixJQUE5QixFQUFvQ0wsT0FBcEM7O0FBQ0FMLE1BQUFBLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JhLEdBQXhCLENBQTRCSCxJQUFJLENBQUN5QixHQUFMLEdBQVkseUNBQXhDO0FBQ0QsS0FKRDtBQUtEOztBQXhEbUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbnJlcXVpcmUoJ0BiYWJlbC9wb2x5ZmlsbCcpXG5jb25zdCB2ID0gcmVxdWlyZSgnLi9wbHVnaW5VdGlsJykubG9ndlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXh0V2VicGFja1BsdWdpbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBsdWdpbiA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy5wbHVnaW4udmFyc1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnBsdWdpbi5vcHRpb25zXG4gICAgdihvcHRpb25zLCdGVU5DVElPTiBhcHBseScpXG4gICAgaWYgKCFjb21waWxlci5ob29rcykge2NvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyk7cmV0dXJufVxuXG4gICAgY29tcGlsZXIuaG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChgZXh0LXRoaXMtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHYob3B0aW9ucywnSE9PSyB0aGlzQ29tcGlsYXRpb24nKVxuICAgICAgcmVxdWlyZShgLi9wbHVnaW5VdGlsYCkuX3RoaXNDb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgICBpZiAodmFycy5wbHVnaW5FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmICh2YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoIHZhcnMuZnJhbWV3b3JrID09ICdleHRqcycpIHtcbiAgICAgIGNvbXBpbGVyLmhvb2tzLmNvbXBpbGF0aW9uLnRhcChgZXh0LWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICAgIHYob3B0aW9ucywnSE9PSyBjb21waWxhdGlvbiAoZW1wdHkpJylcbiAgICAgIH0pXG4gICAgICBjb21waWxlci5ob29rcy5hZnRlckNvbXBpbGUudGFwKCdleHQtYWZ0ZXItY29tcGlsZScsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgICB2KG9wdGlvbnMsJ0hPT0sgYWZ0ZXJDb21waWxlJylcbiAgICAgICAgcmVxdWlyZShgLi9leHRqc1V0aWxgKS5fYWZ0ZXJDb21waWxlKGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKVxuICAgICAgfSlcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb21waWxlci5ob29rcy5jb21waWxhdGlvbi50YXAoYGV4dC1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgICB2KG9wdGlvbnMsJ0hPT0sgY29tcGlsYXRpb24nKVxuICAgICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fY29tcGlsYXRpb24oY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKVxuICAgICAgfSlcbiAgICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyQ29tcGlsZS50YXAoJ2V4dC1hZnRlci1jb21waWxlJywgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICAgIHYob3B0aW9ucywnSE9PSyBhZnRlckNvbXBpbGUnKVxuICAgICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fYWZ0ZXJDb21waWxlKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYoKG9wdGlvbnMudHJlZXNoYWtlID09IHRydWUgJiYgb3B0aW9ucy5lbnZpcm9ubWVudCA9PSAncHJvZHVjdGlvbicpIHx8XG4gICAgICAgKG9wdGlvbnMudHJlZXNoYWtlID09IGZhbHNlICYmIG9wdGlvbnMuZW52aXJvbm1lbnQgIT0gJ3Byb2R1Y3Rpb24nKSlcbiAgICB7XG4gICAgICBjb21waWxlci5ob29rcy5lbWl0LnRhcEFzeW5jKGBleHQtZW1pdGAsIChjb21waWxhdGlvbiwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgdihvcHRpb25zLCdIT09LIGVtaXQnKVxuICAgICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsICgpID0+IHtcbiAgICAgIHYob3B0aW9ucywnSE9PSyBkb25lJylcbiAgICAgIHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLl9kb25lKHZhcnMsIG9wdGlvbnMpXG4gICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2codmFycy5hcHAgKyBgQ29tcGxldGVkIGV4dC13ZWJwYWNrLXBsdWdpbiBwcm9jZXNzaW5nYClcbiAgICB9KVxuICB9XG59XG4iXX0=