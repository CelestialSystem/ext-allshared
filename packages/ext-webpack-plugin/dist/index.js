'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const pluginUtil = require(`./pluginUtil`);

class ExtWebpackPlugin {
  constructor(options) {
    var constructorOutput = pluginUtil._constructor(options);

    this.vars = constructorOutput.vars;
    this.options = constructorOutput.options;
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;
    const app = this.app;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK thisCompilation`);

      pluginUtil._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    var cRun = 0;
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK compilation`);

      if (cRun == 0) {
        pluginUtil._compilation(compiler, compilation, vars, options);
      }

      cRun++;
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      pluginUtil.logh(app, `HOOK afterCompile`);

      pluginUtil._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      pluginUtil.logh(app, `HOOK emit (async)`);

      pluginUtil._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.done.tap(`ext-done`, stats => {
      pluginUtil.logh(app, `HOOK done`);

      pluginUtil._done(stats, vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicGx1Z2luVXRpbCIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjb25zdHJ1Y3Rvck91dHB1dCIsIl9jb25zdHJ1Y3RvciIsInZhcnMiLCJhcHBseSIsImNvbXBpbGVyIiwiYXBwIiwiaG9va3MiLCJjb25zb2xlIiwibG9nIiwidGhpc0NvbXBpbGF0aW9uIiwidGFwIiwiY29tcGlsYXRpb24iLCJsb2doIiwiX3RoaXNDb21waWxhdGlvbiIsInBsdWdpbkVycm9ycyIsImxlbmd0aCIsImVycm9ycyIsInB1c2giLCJFcnJvciIsImpvaW4iLCJjUnVuIiwiX2NvbXBpbGF0aW9uIiwiYWZ0ZXJDb21waWxlIiwiX2FmdGVyQ29tcGlsZSIsImVtaXQiLCJ0YXBBc3luYyIsImNhbGxiYWNrIiwiX2VtaXQiLCJkb25lIiwic3RhdHMiLCJfZG9uZSJdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7QUFDQUEsT0FBTyxDQUFDLGlCQUFELENBQVA7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUUsY0FBRixDQUExQjs7QUFFZSxNQUFNRSxnQkFBTixDQUF1QjtBQUVwQ0MsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVU7QUFDbkIsUUFBSUMsaUJBQWlCLEdBQUdKLFVBQVUsQ0FBQ0ssWUFBWCxDQUF3QkYsT0FBeEIsQ0FBeEI7O0FBQ0EsU0FBS0csSUFBTCxHQUFZRixpQkFBaUIsQ0FBQ0UsSUFBOUI7QUFDQSxTQUFLSCxPQUFMLEdBQWVDLGlCQUFpQixDQUFDRCxPQUFqQztBQUNEOztBQUVESSxFQUFBQSxLQUFLLENBQUNDLFFBQUQsRUFBVztBQUNkLFVBQU1GLElBQUksR0FBRyxLQUFLQSxJQUFsQjtBQUNBLFVBQU1ILE9BQU8sR0FBRyxLQUFLQSxPQUFyQjtBQUNBLFVBQU1NLEdBQUcsR0FBRyxLQUFLQSxHQUFqQjs7QUFFQSxRQUFJLENBQUNELFFBQVEsQ0FBQ0UsS0FBZCxFQUFxQjtBQUNuQkMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZUFBWjtBQUNBO0FBQ0Q7O0FBRURKLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlRyxlQUFmLENBQStCQyxHQUEvQixDQUFvQyxzQkFBcEMsRUFBNERDLFdBQUQsSUFBaUI7QUFDMUVmLE1BQUFBLFVBQVUsQ0FBQ2dCLElBQVgsQ0FBZ0JQLEdBQWhCLEVBQXNCLHNCQUF0Qjs7QUFDQVQsTUFBQUEsVUFBVSxDQUFDaUIsZ0JBQVgsQ0FBNEJULFFBQTVCLEVBQXNDTyxXQUF0QyxFQUFtRFQsSUFBbkQsRUFBeURILE9BQXpEOztBQUVBLFVBQUlHLElBQUksQ0FBQ1ksWUFBTCxDQUFrQkMsTUFBbEIsR0FBMkIsQ0FBL0IsRUFBa0M7QUFDaENKLFFBQUFBLFdBQVcsQ0FBQ0ssTUFBWixDQUFtQkMsSUFBbkIsQ0FBeUIsSUFBSUMsS0FBSixDQUFVaEIsSUFBSSxDQUFDWSxZQUFMLENBQWtCSyxJQUFsQixDQUF1QixFQUF2QixDQUFWLENBQXpCO0FBQ0E7QUFDRDtBQUNGLEtBUkQ7QUFVQSxRQUFJQyxJQUFJLEdBQUcsQ0FBWDtBQUNBaEIsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVLLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRWYsTUFBQUEsVUFBVSxDQUFDZ0IsSUFBWCxDQUFnQlAsR0FBaEIsRUFBc0Isa0JBQXRCOztBQUNBLFVBQUllLElBQUksSUFBSSxDQUFaLEVBQWU7QUFDYnhCLFFBQUFBLFVBQVUsQ0FBQ3lCLFlBQVgsQ0FBd0JqQixRQUF4QixFQUFrQ08sV0FBbEMsRUFBK0NULElBQS9DLEVBQXFESCxPQUFyRDtBQUNEOztBQUNEcUIsTUFBQUEsSUFBSTtBQUNMLEtBTkQ7QUFRQWhCLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlZ0IsWUFBZixDQUE0QlosR0FBNUIsQ0FBZ0MsbUJBQWhDLEVBQXNEQyxXQUFELElBQWlCO0FBQ3BFZixNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixtQkFBdEI7O0FBQ0FULE1BQUFBLFVBQVUsQ0FBQzJCLGFBQVgsQ0FBeUJuQixRQUF6QixFQUFtQ08sV0FBbkMsRUFBZ0RULElBQWhELEVBQXNESCxPQUF0RDtBQUNELEtBSEQ7QUFLQUssSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVrQixJQUFmLENBQW9CQyxRQUFwQixDQUE4QixVQUE5QixFQUF5QyxDQUFDZCxXQUFELEVBQWNlLFFBQWQsS0FBMkI7QUFDbEU5QixNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixtQkFBdEI7O0FBQ0FULE1BQUFBLFVBQVUsQ0FBQytCLEtBQVgsQ0FBaUJ2QixRQUFqQixFQUEyQk8sV0FBM0IsRUFBd0NULElBQXhDLEVBQThDSCxPQUE5QyxFQUF1RDJCLFFBQXZEO0FBQ0QsS0FIRDtBQUtBdEIsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVzQixJQUFmLENBQW9CbEIsR0FBcEIsQ0FBeUIsVUFBekIsRUFBcUNtQixLQUFELElBQVc7QUFDN0NqQyxNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixXQUF0Qjs7QUFDQVQsTUFBQUEsVUFBVSxDQUFDa0MsS0FBWCxDQUFpQkQsS0FBakIsRUFBd0IzQixJQUF4QixFQUE4QkgsT0FBOUI7QUFDRCxLQUhEO0FBSUQ7O0FBbkRtQyIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5yZXF1aXJlKCdAYmFiZWwvcG9seWZpbGwnKVxuY29uc3QgcGx1Z2luVXRpbCA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4dFdlYnBhY2tQbHVnaW4ge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RydWN0b3JPdXRwdXQgPSBwbHVnaW5VdGlsLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICAgIHRoaXMudmFycyA9IGNvbnN0cnVjdG9yT3V0cHV0LnZhcnNcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25zdHJ1Y3Rvck91dHB1dC5vcHRpb25zXG4gIH1cblxuICBhcHBseShjb21waWxlcikge1xuICAgIGNvbnN0IHZhcnMgPSB0aGlzLnZhcnNcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgY29uc3QgYXBwID0gdGhpcy5hcHBcblxuICAgIGlmICghY29tcGlsZXIuaG9va3MpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29tcGlsZXIuaG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChgZXh0LXRoaXMtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHBsdWdpblV0aWwubG9naChhcHAsIGBIT09LIHRoaXNDb21waWxhdGlvbmApXG4gICAgICBwbHVnaW5VdGlsLl90aGlzQ29tcGlsYXRpb24oY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKVxuXG4gICAgICBpZiAodmFycy5wbHVnaW5FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSlcblxuICAgIHZhciBjUnVuID0gMDtcbiAgICBjb21waWxlci5ob29rcy5jb21waWxhdGlvbi50YXAoYGV4dC1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgY29tcGlsYXRpb25gKVxuICAgICAgaWYgKGNSdW4gPT0gMCkge1xuICAgICAgICBwbHVnaW5VdGlsLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgY1J1bisrO1xuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5hZnRlckNvbXBpbGUudGFwKCdleHQtYWZ0ZXItY29tcGlsZScsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgYWZ0ZXJDb21waWxlYClcbiAgICAgIHBsdWdpblV0aWwuX2FmdGVyQ29tcGlsZShjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgZW1pdCAoYXN5bmMpYClcbiAgICAgIHBsdWdpblV0aWwuX2VtaXQoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuZG9uZS50YXAoYGV4dC1kb25lYCwgKHN0YXRzKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyBkb25lYClcbiAgICAgIHBsdWdpblV0aWwuX2RvbmUoc3RhdHMsIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcbiAgfVxufVxuIl19