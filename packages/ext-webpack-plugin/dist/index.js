'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const p = require(`./pluginUtil`);

class ExtWebpackPlugin {
  constructor(options) {
    var o = p._constructor(options);

    this.vars = o.vars;
    this.options = o.options;
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      p.logh(vars.app + `HOOK thisCompilation`);

      p._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      p.logh(vars.app + `HOOK compilation`);

      p._compilation(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      p.logh(vars.app + `HOOK emit (async)`);

      p._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      p.logh(vars.app + `HOOK afterCompile`);

      p._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.done.tap(`ext-done`, () => {
      p.logh(vars.app + `HOOK done`);

      p._done(vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicCIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJvIiwiX2NvbnN0cnVjdG9yIiwidmFycyIsImFwcGx5IiwiY29tcGlsZXIiLCJob29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsImxvZ2giLCJhcHAiLCJfdGhpc0NvbXBpbGF0aW9uIiwicGx1Z2luRXJyb3JzIiwibGVuZ3RoIiwiZXJyb3JzIiwicHVzaCIsIkVycm9yIiwiam9pbiIsIl9jb21waWxhdGlvbiIsImVtaXQiLCJ0YXBBc3luYyIsImNhbGxiYWNrIiwiX2VtaXQiLCJhZnRlckNvbXBpbGUiLCJfYWZ0ZXJDb21waWxlIiwiZG9uZSIsIl9kb25lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUNBQSxPQUFPLENBQUMsaUJBQUQsQ0FBUDs7QUFDQSxNQUFNQyxDQUFDLEdBQUdELE9BQU8sQ0FBRSxjQUFGLENBQWpCOztBQUVlLE1BQU1FLGdCQUFOLENBQXVCO0FBRXBDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQixRQUFJQyxDQUFDLEdBQUdKLENBQUMsQ0FBQ0ssWUFBRixDQUFlRixPQUFmLENBQVI7O0FBQ0EsU0FBS0csSUFBTCxHQUFZRixDQUFDLENBQUNFLElBQWQ7QUFDQSxTQUFLSCxPQUFMLEdBQWVDLENBQUMsQ0FBQ0QsT0FBakI7QUFDRDs7QUFFREksRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNRixJQUFJLEdBQUcsS0FBS0EsSUFBbEI7QUFDQSxVQUFNSCxPQUFPLEdBQUcsS0FBS0EsT0FBckI7O0FBRUEsUUFBSSxDQUFDSyxRQUFRLENBQUNDLEtBQWQsRUFBcUI7QUFBQ0MsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZUFBWjtBQUE2QjtBQUFPOztBQUUxREgsSUFBQUEsUUFBUSxDQUFDQyxLQUFULENBQWVHLGVBQWYsQ0FBK0JDLEdBQS9CLENBQW9DLHNCQUFwQyxFQUE0REMsV0FBRCxJQUFpQjtBQUMxRWQsTUFBQUEsQ0FBQyxDQUFDZSxJQUFGLENBQU9ULElBQUksQ0FBQ1UsR0FBTCxHQUFZLHNCQUFuQjs7QUFDQWhCLE1BQUFBLENBQUMsQ0FBQ2lCLGdCQUFGLENBQW1CVCxRQUFuQixFQUE2Qk0sV0FBN0IsRUFBMENSLElBQTFDLEVBQWdESCxPQUFoRDs7QUFDQSxVQUFJRyxJQUFJLENBQUNZLFlBQUwsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDTCxRQUFBQSxXQUFXLENBQUNNLE1BQVosQ0FBbUJDLElBQW5CLENBQXlCLElBQUlDLEtBQUosQ0FBVWhCLElBQUksQ0FBQ1ksWUFBTCxDQUFrQkssSUFBbEIsQ0FBdUIsRUFBdkIsQ0FBVixDQUF6QjtBQUNBO0FBQ0Q7QUFDRixLQVBEO0FBU0FmLElBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlSyxXQUFmLENBQTJCRCxHQUEzQixDQUFnQyxpQkFBaEMsRUFBbURDLFdBQUQsSUFBaUI7QUFDakVkLE1BQUFBLENBQUMsQ0FBQ2UsSUFBRixDQUFPVCxJQUFJLENBQUNVLEdBQUwsR0FBWSxrQkFBbkI7O0FBQ0FoQixNQUFBQSxDQUFDLENBQUN3QixZQUFGLENBQWVoQixRQUFmLEVBQXlCTSxXQUF6QixFQUFzQ1IsSUFBdEMsRUFBNENILE9BQTVDO0FBQ0QsS0FIRDtBQUtBSyxJQUFBQSxRQUFRLENBQUNDLEtBQVQsQ0FBZWdCLElBQWYsQ0FBb0JDLFFBQXBCLENBQThCLFVBQTlCLEVBQXlDLENBQUNaLFdBQUQsRUFBY2EsUUFBZCxLQUEyQjtBQUNsRTNCLE1BQUFBLENBQUMsQ0FBQ2UsSUFBRixDQUFPVCxJQUFJLENBQUNVLEdBQUwsR0FBWSxtQkFBbkI7O0FBQ0FoQixNQUFBQSxDQUFDLENBQUM0QixLQUFGLENBQVFwQixRQUFSLEVBQWtCTSxXQUFsQixFQUErQlIsSUFBL0IsRUFBcUNILE9BQXJDLEVBQThDd0IsUUFBOUM7QUFDRCxLQUhEO0FBS0FuQixJQUFBQSxRQUFRLENBQUNDLEtBQVQsQ0FBZW9CLFlBQWYsQ0FBNEJoQixHQUE1QixDQUFnQyxtQkFBaEMsRUFBc0RDLFdBQUQsSUFBaUI7QUFDcEVkLE1BQUFBLENBQUMsQ0FBQ2UsSUFBRixDQUFPVCxJQUFJLENBQUNVLEdBQUwsR0FBWSxtQkFBbkI7O0FBQ0FoQixNQUFBQSxDQUFDLENBQUM4QixhQUFGLENBQWdCdEIsUUFBaEIsRUFBMEJNLFdBQTFCLEVBQXVDUixJQUF2QyxFQUE2Q0gsT0FBN0M7QUFDRCxLQUhEO0FBS0FLLElBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlc0IsSUFBZixDQUFvQmxCLEdBQXBCLENBQXlCLFVBQXpCLEVBQW9DLE1BQU07QUFDeENiLE1BQUFBLENBQUMsQ0FBQ2UsSUFBRixDQUFPVCxJQUFJLENBQUNVLEdBQUwsR0FBWSxXQUFuQjs7QUFDQWhCLE1BQUFBLENBQUMsQ0FBQ2dDLEtBQUYsQ0FBUTFCLElBQVIsRUFBY0gsT0FBZDtBQUNELEtBSEQ7QUFJRDs7QUExQ21DIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5yZXF1aXJlKCdAYmFiZWwvcG9seWZpbGwnKVxuY29uc3QgcCA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4dFdlYnBhY2tQbHVnaW4ge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgbyA9IHAuX2NvbnN0cnVjdG9yKG9wdGlvbnMpXG4gICAgdGhpcy52YXJzID0gby52YXJzXG4gICAgdGhpcy5vcHRpb25zID0gby5vcHRpb25zXG4gIH1cblxuICBhcHBseShjb21waWxlcikge1xuICAgIGNvbnN0IHZhcnMgPSB0aGlzLnZhcnNcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgICBpZiAoIWNvbXBpbGVyLmhvb2tzKSB7Y29uc29sZS5sb2coJ25vdCB3ZWJwYWNrIDQnKTtyZXR1cm59XG5cbiAgICBjb21waWxlci5ob29rcy50aGlzQ29tcGlsYXRpb24udGFwKGBleHQtdGhpcy1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcC5sb2doKHZhcnMuYXBwICsgYEhPT0sgdGhpc0NvbXBpbGF0aW9uYClcbiAgICAgIHAuX3RoaXNDb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgICBpZiAodmFycy5wbHVnaW5FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmNvbXBpbGF0aW9uLnRhcChgZXh0LWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwLmxvZ2godmFycy5hcHAgKyBgSE9PSyBjb21waWxhdGlvbmApXG4gICAgICBwLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgcC5sb2doKHZhcnMuYXBwICsgYEhPT0sgZW1pdCAoYXN5bmMpYClcbiAgICAgIHAuX2VtaXQoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuYWZ0ZXJDb21waWxlLnRhcCgnZXh0LWFmdGVyLWNvbXBpbGUnLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHAubG9naCh2YXJzLmFwcCArIGBIT09LIGFmdGVyQ29tcGlsZWApXG4gICAgICBwLl9hZnRlckNvbXBpbGUoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zKVxuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5kb25lLnRhcChgZXh0LWRvbmVgLCAoKSA9PiB7XG4gICAgICBwLmxvZ2godmFycy5hcHAgKyBgSE9PSyBkb25lYClcbiAgICAgIHAuX2RvbmUodmFycywgb3B0aW9ucylcbiAgICB9KVxuICB9XG59XG4iXX0=