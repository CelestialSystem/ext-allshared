'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const pluginUtil = require(`./pluginUtil`);

class ExtWebpackPlugin {
  constructor(options) {
    var constructorOutput = pluginUtil._constructor(options);

    this.vars = constructorOutput.vars;
    this.options = constructorOutput.options;
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;
    const app = this.app;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK thisCompilation`);

      pluginUtil._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    }); //var cRun = 0;

    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      pluginUtil.logh(app, `HOOK compilation`); //if (cRun == 0) {

      pluginUtil._compilation(compiler, compilation, vars, options); //}
      //cRun++;

    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      pluginUtil.logh(app, `HOOK afterCompile`);

      pluginUtil._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      pluginUtil.logh(app, `HOOK emit (async)`);

      pluginUtil._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.done.tap(`ext-done`, stats => {
      pluginUtil.logh(app, `HOOK done`);

      pluginUtil._done(stats, vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicGx1Z2luVXRpbCIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJjb25zdHJ1Y3Rvck91dHB1dCIsIl9jb25zdHJ1Y3RvciIsInZhcnMiLCJhcHBseSIsImNvbXBpbGVyIiwiYXBwIiwiaG9va3MiLCJjb25zb2xlIiwibG9nIiwidGhpc0NvbXBpbGF0aW9uIiwidGFwIiwiY29tcGlsYXRpb24iLCJsb2doIiwiX3RoaXNDb21waWxhdGlvbiIsInBsdWdpbkVycm9ycyIsImxlbmd0aCIsImVycm9ycyIsInB1c2giLCJFcnJvciIsImpvaW4iLCJfY29tcGlsYXRpb24iLCJhZnRlckNvbXBpbGUiLCJfYWZ0ZXJDb21waWxlIiwiZW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJfZW1pdCIsImRvbmUiLCJzdGF0cyIsIl9kb25lIl0sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7OztBQUNBQSxPQUFPLENBQUMsaUJBQUQsQ0FBUDs7QUFDQSxNQUFNQyxVQUFVLEdBQUdELE9BQU8sQ0FBRSxjQUFGLENBQTFCOztBQUVlLE1BQU1FLGdCQUFOLENBQXVCO0FBRXBDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQixRQUFJQyxpQkFBaUIsR0FBR0osVUFBVSxDQUFDSyxZQUFYLENBQXdCRixPQUF4QixDQUF4Qjs7QUFDQSxTQUFLRyxJQUFMLEdBQVlGLGlCQUFpQixDQUFDRSxJQUE5QjtBQUNBLFNBQUtILE9BQUwsR0FBZUMsaUJBQWlCLENBQUNELE9BQWpDO0FBQ0Q7O0FBRURJLEVBQUFBLEtBQUssQ0FBQ0MsUUFBRCxFQUFXO0FBQ2QsVUFBTUYsSUFBSSxHQUFHLEtBQUtBLElBQWxCO0FBQ0EsVUFBTUgsT0FBTyxHQUFHLEtBQUtBLE9BQXJCO0FBQ0EsVUFBTU0sR0FBRyxHQUFHLEtBQUtBLEdBQWpCOztBQUVBLFFBQUksQ0FBQ0QsUUFBUSxDQUFDRSxLQUFkLEVBQXFCO0FBQ25CQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxlQUFaO0FBQ0E7QUFDRDs7QUFFREosSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVHLGVBQWYsQ0FBK0JDLEdBQS9CLENBQW9DLHNCQUFwQyxFQUE0REMsV0FBRCxJQUFpQjtBQUMxRWYsTUFBQUEsVUFBVSxDQUFDZ0IsSUFBWCxDQUFnQlAsR0FBaEIsRUFBc0Isc0JBQXRCOztBQUNBVCxNQUFBQSxVQUFVLENBQUNpQixnQkFBWCxDQUE0QlQsUUFBNUIsRUFBc0NPLFdBQXRDLEVBQW1EVCxJQUFuRCxFQUF5REgsT0FBekQ7O0FBRUEsVUFBSUcsSUFBSSxDQUFDWSxZQUFMLENBQWtCQyxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQ0osUUFBQUEsV0FBVyxDQUFDSyxNQUFaLENBQW1CQyxJQUFuQixDQUF5QixJQUFJQyxLQUFKLENBQVVoQixJQUFJLENBQUNZLFlBQUwsQ0FBa0JLLElBQWxCLENBQXVCLEVBQXZCLENBQVYsQ0FBekI7QUFDQTtBQUNEO0FBQ0YsS0FSRCxFQVZjLENBb0JkOztBQUNBZixJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZUssV0FBZixDQUEyQkQsR0FBM0IsQ0FBZ0MsaUJBQWhDLEVBQW1EQyxXQUFELElBQWlCO0FBQ2pFZixNQUFBQSxVQUFVLENBQUNnQixJQUFYLENBQWdCUCxHQUFoQixFQUFzQixrQkFBdEIsRUFEaUUsQ0FFakU7O0FBQ0VULE1BQUFBLFVBQVUsQ0FBQ3dCLFlBQVgsQ0FBd0JoQixRQUF4QixFQUFrQ08sV0FBbEMsRUFBK0NULElBQS9DLEVBQXFESCxPQUFyRCxFQUgrRCxDQUlqRTtBQUNBOztBQUNELEtBTkQ7QUFRQUssSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVlLFlBQWYsQ0FBNEJYLEdBQTVCLENBQWdDLG1CQUFoQyxFQUFzREMsV0FBRCxJQUFpQjtBQUNwRWYsTUFBQUEsVUFBVSxDQUFDZ0IsSUFBWCxDQUFnQlAsR0FBaEIsRUFBc0IsbUJBQXRCOztBQUNBVCxNQUFBQSxVQUFVLENBQUMwQixhQUFYLENBQXlCbEIsUUFBekIsRUFBbUNPLFdBQW5DLEVBQWdEVCxJQUFoRCxFQUFzREgsT0FBdEQ7QUFDRCxLQUhEO0FBS0FLLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlaUIsSUFBZixDQUFvQkMsUUFBcEIsQ0FBOEIsVUFBOUIsRUFBeUMsQ0FBQ2IsV0FBRCxFQUFjYyxRQUFkLEtBQTJCO0FBQ2xFN0IsTUFBQUEsVUFBVSxDQUFDZ0IsSUFBWCxDQUFnQlAsR0FBaEIsRUFBc0IsbUJBQXRCOztBQUNBVCxNQUFBQSxVQUFVLENBQUM4QixLQUFYLENBQWlCdEIsUUFBakIsRUFBMkJPLFdBQTNCLEVBQXdDVCxJQUF4QyxFQUE4Q0gsT0FBOUMsRUFBdUQwQixRQUF2RDtBQUNELEtBSEQ7QUFLQXJCLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlcUIsSUFBZixDQUFvQmpCLEdBQXBCLENBQXlCLFVBQXpCLEVBQXFDa0IsS0FBRCxJQUFXO0FBQzdDaEMsTUFBQUEsVUFBVSxDQUFDZ0IsSUFBWCxDQUFnQlAsR0FBaEIsRUFBc0IsV0FBdEI7O0FBQ0FULE1BQUFBLFVBQVUsQ0FBQ2lDLEtBQVgsQ0FBaUJELEtBQWpCLEVBQXdCMUIsSUFBeEIsRUFBOEJILE9BQTlCO0FBQ0QsS0FIRDtBQUlEOztBQW5EbUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnQGJhYmVsL3BvbHlmaWxsJylcbmNvbnN0IHBsdWdpblV0aWwgPSByZXF1aXJlKGAuL3BsdWdpblV0aWxgKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yT3V0cHV0ID0gcGx1Z2luVXRpbC5fY29uc3RydWN0b3Iob3B0aW9ucylcbiAgICB0aGlzLnZhcnMgPSBjb25zdHJ1Y3Rvck91dHB1dC52YXJzXG4gICAgdGhpcy5vcHRpb25zID0gY29uc3RydWN0b3JPdXRwdXQub3B0aW9uc1xuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy52YXJzXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwXG5cbiAgICBpZiAoIWNvbXBpbGVyLmhvb2tzKSB7XG4gICAgICBjb25zb2xlLmxvZygnbm90IHdlYnBhY2sgNCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbXBpbGVyLmhvb2tzLnRoaXNDb21waWxhdGlvbi50YXAoYGV4dC10aGlzLWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyB0aGlzQ29tcGlsYXRpb25gKVxuICAgICAgcGx1Z2luVXRpbC5fdGhpc0NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcblxuICAgICAgaWYgKHZhcnMucGx1Z2luRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29tcGlsYXRpb24uZXJyb3JzLnB1c2goIG5ldyBFcnJvcih2YXJzLnBsdWdpbkVycm9ycy5qb2luKFwiXCIpKSApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvL3ZhciBjUnVuID0gMDtcbiAgICBjb21waWxlci5ob29rcy5jb21waWxhdGlvbi50YXAoYGV4dC1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgY29tcGlsYXRpb25gKVxuICAgICAgLy9pZiAoY1J1biA9PSAwKSB7XG4gICAgICAgIHBsdWdpblV0aWwuX2NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucyk7XG4gICAgICAvL31cbiAgICAgIC8vY1J1bisrO1xuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5hZnRlckNvbXBpbGUudGFwKCdleHQtYWZ0ZXItY29tcGlsZScsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgYWZ0ZXJDb21waWxlYClcbiAgICAgIHBsdWdpblV0aWwuX2FmdGVyQ29tcGlsZShjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgcGx1Z2luVXRpbC5sb2doKGFwcCwgYEhPT0sgZW1pdCAoYXN5bmMpYClcbiAgICAgIHBsdWdpblV0aWwuX2VtaXQoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuZG9uZS50YXAoYGV4dC1kb25lYCwgKHN0YXRzKSA9PiB7XG4gICAgICBwbHVnaW5VdGlsLmxvZ2goYXBwLCBgSE9PSyBkb25lYClcbiAgICAgIHBsdWdpblV0aWwuX2RvbmUoc3RhdHMsIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcbiAgfVxufVxuIl19