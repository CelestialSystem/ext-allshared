'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const p = require(`./pluginUtil`);

class ExtWebpackPlugin {
  constructor(options) {
    var o = p._constructor(options);

    this.vars = o.vars;
    this.options = o.options;
  }

  apply(compiler) {
    const vars = this.vars;
    const options = this.options;
    const app = this.app;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      p.logh(app, `HOOK thisCompilation`);

      p._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      p.logh(app, `HOOK compilation`);

      p._compilation(compiler, compilation, vars, options);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      p.logh(app, `HOOK afterCompile`);

      p._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      p.logh(app, `HOOK emit (async)`);

      p._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.done.tap(`ext-done`, () => {
      p.logh(app, `HOOK done`);

      p._done(vars, options);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicCIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJvIiwiX2NvbnN0cnVjdG9yIiwidmFycyIsImFwcGx5IiwiY29tcGlsZXIiLCJhcHAiLCJob29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsImxvZ2giLCJfdGhpc0NvbXBpbGF0aW9uIiwicGx1Z2luRXJyb3JzIiwibGVuZ3RoIiwiZXJyb3JzIiwicHVzaCIsIkVycm9yIiwiam9pbiIsIl9jb21waWxhdGlvbiIsImFmdGVyQ29tcGlsZSIsIl9hZnRlckNvbXBpbGUiLCJlbWl0IiwidGFwQXN5bmMiLCJjYWxsYmFjayIsIl9lbWl0IiwiZG9uZSIsIl9kb25lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUNBQSxPQUFPLENBQUMsaUJBQUQsQ0FBUDs7QUFDQSxNQUFNQyxDQUFDLEdBQUdELE9BQU8sQ0FBRSxjQUFGLENBQWpCOztBQUVlLE1BQU1FLGdCQUFOLENBQXVCO0FBRXBDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQixRQUFJQyxDQUFDLEdBQUdKLENBQUMsQ0FBQ0ssWUFBRixDQUFlRixPQUFmLENBQVI7O0FBQ0EsU0FBS0csSUFBTCxHQUFZRixDQUFDLENBQUNFLElBQWQ7QUFDQSxTQUFLSCxPQUFMLEdBQWVDLENBQUMsQ0FBQ0QsT0FBakI7QUFDRDs7QUFFREksRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNRixJQUFJLEdBQUcsS0FBS0EsSUFBbEI7QUFDQSxVQUFNSCxPQUFPLEdBQUcsS0FBS0EsT0FBckI7QUFDQSxVQUFNTSxHQUFHLEdBQUcsS0FBS0EsR0FBakI7O0FBRUEsUUFBSSxDQUFDRCxRQUFRLENBQUNFLEtBQWQsRUFBcUI7QUFBQ0MsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZUFBWjtBQUE2QjtBQUFPOztBQUUxREosSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVHLGVBQWYsQ0FBK0JDLEdBQS9CLENBQW9DLHNCQUFwQyxFQUE0REMsV0FBRCxJQUFpQjtBQUMxRWYsTUFBQUEsQ0FBQyxDQUFDZ0IsSUFBRixDQUFPUCxHQUFQLEVBQWEsc0JBQWI7O0FBQ0FULE1BQUFBLENBQUMsQ0FBQ2lCLGdCQUFGLENBQW1CVCxRQUFuQixFQUE2Qk8sV0FBN0IsRUFBMENULElBQTFDLEVBQWdESCxPQUFoRDs7QUFDQSxVQUFJRyxJQUFJLENBQUNZLFlBQUwsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDSixRQUFBQSxXQUFXLENBQUNLLE1BQVosQ0FBbUJDLElBQW5CLENBQXlCLElBQUlDLEtBQUosQ0FBVWhCLElBQUksQ0FBQ1ksWUFBTCxDQUFrQkssSUFBbEIsQ0FBdUIsRUFBdkIsQ0FBVixDQUF6QjtBQUNBO0FBQ0Q7QUFDRixLQVBEO0FBU0FmLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlSyxXQUFmLENBQTJCRCxHQUEzQixDQUFnQyxpQkFBaEMsRUFBbURDLFdBQUQsSUFBaUI7QUFDakVmLE1BQUFBLENBQUMsQ0FBQ2dCLElBQUYsQ0FBT1AsR0FBUCxFQUFhLGtCQUFiOztBQUNBVCxNQUFBQSxDQUFDLENBQUN3QixZQUFGLENBQWVoQixRQUFmLEVBQXlCTyxXQUF6QixFQUFzQ1QsSUFBdEMsRUFBNENILE9BQTVDO0FBQ0QsS0FIRDtBQUtBSyxJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZWUsWUFBZixDQUE0QlgsR0FBNUIsQ0FBZ0MsbUJBQWhDLEVBQXNEQyxXQUFELElBQWlCO0FBQ3BFZixNQUFBQSxDQUFDLENBQUNnQixJQUFGLENBQU9QLEdBQVAsRUFBYSxtQkFBYjs7QUFDQVQsTUFBQUEsQ0FBQyxDQUFDMEIsYUFBRixDQUFnQmxCLFFBQWhCLEVBQTBCTyxXQUExQixFQUF1Q1QsSUFBdkMsRUFBNkNILE9BQTdDO0FBQ0QsS0FIRDtBQUtBSyxJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZWlCLElBQWYsQ0FBb0JDLFFBQXBCLENBQThCLFVBQTlCLEVBQXlDLENBQUNiLFdBQUQsRUFBY2MsUUFBZCxLQUEyQjtBQUNsRTdCLE1BQUFBLENBQUMsQ0FBQ2dCLElBQUYsQ0FBT1AsR0FBUCxFQUFhLG1CQUFiOztBQUNBVCxNQUFBQSxDQUFDLENBQUM4QixLQUFGLENBQVF0QixRQUFSLEVBQWtCTyxXQUFsQixFQUErQlQsSUFBL0IsRUFBcUNILE9BQXJDLEVBQThDMEIsUUFBOUM7QUFDRCxLQUhEO0FBS0FyQixJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZXFCLElBQWYsQ0FBb0JqQixHQUFwQixDQUF5QixVQUF6QixFQUFvQyxNQUFNO0FBQ3hDZCxNQUFBQSxDQUFDLENBQUNnQixJQUFGLENBQU9QLEdBQVAsRUFBYSxXQUFiOztBQUNBVCxNQUFBQSxDQUFDLENBQUNnQyxLQUFGLENBQVExQixJQUFSLEVBQWNILE9BQWQ7QUFDRCxLQUhEO0FBSUQ7O0FBM0NtQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnQGJhYmVsL3BvbHlmaWxsJylcbmNvbnN0IHAgPSByZXF1aXJlKGAuL3BsdWdpblV0aWxgKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIG8gPSBwLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICAgIHRoaXMudmFycyA9IG8udmFyc1xuICAgIHRoaXMub3B0aW9ucyA9IG8ub3B0aW9uc1xuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy52YXJzXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICAgIGNvbnN0IGFwcCA9IHRoaXMuYXBwXG5cbiAgICBpZiAoIWNvbXBpbGVyLmhvb2tzKSB7Y29uc29sZS5sb2coJ25vdCB3ZWJwYWNrIDQnKTtyZXR1cm59XG5cbiAgICBjb21waWxlci5ob29rcy50aGlzQ29tcGlsYXRpb24udGFwKGBleHQtdGhpcy1jb21waWxhdGlvbmAsIChjb21waWxhdGlvbikgPT4ge1xuICAgICAgcC5sb2doKGFwcCwgYEhPT0sgdGhpc0NvbXBpbGF0aW9uYClcbiAgICAgIHAuX3RoaXNDb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgICBpZiAodmFycy5wbHVnaW5FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmNvbXBpbGF0aW9uLnRhcChgZXh0LWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwLmxvZ2goYXBwLCBgSE9PSyBjb21waWxhdGlvbmApXG4gICAgICBwLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyQ29tcGlsZS50YXAoJ2V4dC1hZnRlci1jb21waWxlJywgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBwLmxvZ2goYXBwLCBgSE9PSyBhZnRlckNvbXBpbGVgKVxuICAgICAgcC5fYWZ0ZXJDb21waWxlKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuZW1pdC50YXBBc3luYyhgZXh0LWVtaXRgLCAoY29tcGlsYXRpb24sIGNhbGxiYWNrKSA9PiB7XG4gICAgICBwLmxvZ2goYXBwLCBgSE9PSyBlbWl0IChhc3luYylgKVxuICAgICAgcC5fZW1pdChjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgIH0pXG5cbiAgICBjb21waWxlci5ob29rcy5kb25lLnRhcChgZXh0LWRvbmVgLCAoKSA9PiB7XG4gICAgICBwLmxvZ2goYXBwLCBgSE9PSyBkb25lYClcbiAgICAgIHAuX2RvbmUodmFycywgb3B0aW9ucylcbiAgICB9KVxuICB9XG59XG4iXX0=