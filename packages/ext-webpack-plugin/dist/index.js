'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const p = require(`./pluginUtil`);

const v = p.logv;
const l = p.log;

class ExtWebpackPlugin {
  constructor(options) {
    this.plugin = p._constructor(options);
  }

  apply(compiler) {
    const vars = this.plugin.vars;
    const options = this.plugin.options;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      l(vars.app + `HOOK thisCompilation`);

      p._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      l(vars.app + `HOOK compilation`);

      p._compilation(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      l(vars.app + `HOOK emit (async)`);

      p._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      l(vars.app + `HOOK afterCompile`);

      p._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.done.tap(`ext-done`, () => {
      l(vars.app + `HOOK done`);

      p._done(vars, options);

      require('./pluginUtil').log(vars.app + `Completed ext-webpack-plugin processing`);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicCIsInYiLCJsb2d2IiwibCIsImxvZyIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJwbHVnaW4iLCJfY29uc3RydWN0b3IiLCJhcHBseSIsImNvbXBpbGVyIiwidmFycyIsImhvb2tzIiwiY29uc29sZSIsInRoaXNDb21waWxhdGlvbiIsInRhcCIsImNvbXBpbGF0aW9uIiwiYXBwIiwiX3RoaXNDb21waWxhdGlvbiIsInBsdWdpbkVycm9ycyIsImxlbmd0aCIsImVycm9ycyIsInB1c2giLCJFcnJvciIsImpvaW4iLCJfY29tcGlsYXRpb24iLCJlbWl0IiwidGFwQXN5bmMiLCJjYWxsYmFjayIsIl9lbWl0IiwiYWZ0ZXJDb21waWxlIiwiX2FmdGVyQ29tcGlsZSIsImRvbmUiLCJfZG9uZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFDQUEsT0FBTyxDQUFDLGlCQUFELENBQVA7O0FBQ0EsTUFBTUMsQ0FBQyxHQUFHRCxPQUFPLENBQUUsY0FBRixDQUFqQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELENBQUMsQ0FBQ0UsSUFBWjtBQUNBLE1BQU1DLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxHQUFaOztBQUNlLE1BQU1DLGdCQUFOLENBQXVCO0FBRXBDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQixTQUFLQyxNQUFMLEdBQWNSLENBQUMsQ0FBQ1MsWUFBRixDQUFlRixPQUFmLENBQWQ7QUFDRDs7QUFFREcsRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNQyxJQUFJLEdBQUcsS0FBS0osTUFBTCxDQUFZSSxJQUF6QjtBQUNBLFVBQU1MLE9BQU8sR0FBRyxLQUFLQyxNQUFMLENBQVlELE9BQTVCOztBQUNBLFFBQUksQ0FBQ0ksUUFBUSxDQUFDRSxLQUFkLEVBQXFCO0FBQUNDLE1BQUFBLE9BQU8sQ0FBQ1YsR0FBUixDQUFZLGVBQVo7QUFBNkI7QUFBTzs7QUFFMURPLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlRSxlQUFmLENBQStCQyxHQUEvQixDQUFvQyxzQkFBcEMsRUFBNERDLFdBQUQsSUFBaUI7QUFDMUVkLE1BQUFBLENBQUMsQ0FBQ1MsSUFBSSxDQUFDTSxHQUFMLEdBQVksc0JBQWIsQ0FBRDs7QUFDQWxCLE1BQUFBLENBQUMsQ0FBQ21CLGdCQUFGLENBQW1CUixRQUFuQixFQUE2Qk0sV0FBN0IsRUFBMENMLElBQTFDLEVBQWdETCxPQUFoRDs7QUFDQSxVQUFJSyxJQUFJLENBQUNRLFlBQUwsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDSixRQUFBQSxXQUFXLENBQUNLLE1BQVosQ0FBbUJDLElBQW5CLENBQXlCLElBQUlDLEtBQUosQ0FBVVosSUFBSSxDQUFDUSxZQUFMLENBQWtCSyxJQUFsQixDQUF1QixFQUF2QixDQUFWLENBQXpCO0FBQ0E7QUFDRDtBQUNGLEtBUEQ7QUFTQWQsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVJLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRWQsTUFBQUEsQ0FBQyxDQUFDUyxJQUFJLENBQUNNLEdBQUwsR0FBWSxrQkFBYixDQUFEOztBQUNBbEIsTUFBQUEsQ0FBQyxDQUFDMEIsWUFBRixDQUFlZixRQUFmLEVBQXlCTSxXQUF6QixFQUFzQ0wsSUFBdEMsRUFBNENMLE9BQTVDO0FBQ0QsS0FIRDtBQUtBSSxJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZWMsSUFBZixDQUFvQkMsUUFBcEIsQ0FBOEIsVUFBOUIsRUFBeUMsQ0FBQ1gsV0FBRCxFQUFjWSxRQUFkLEtBQTJCO0FBQ2xFMUIsTUFBQUEsQ0FBQyxDQUFDUyxJQUFJLENBQUNNLEdBQUwsR0FBWSxtQkFBYixDQUFEOztBQUNBbEIsTUFBQUEsQ0FBQyxDQUFDOEIsS0FBRixDQUFRbkIsUUFBUixFQUFrQk0sV0FBbEIsRUFBK0JMLElBQS9CLEVBQXFDTCxPQUFyQyxFQUE4Q3NCLFFBQTlDO0FBQ0QsS0FIRDtBQUtBbEIsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVrQixZQUFmLENBQTRCZixHQUE1QixDQUFnQyxtQkFBaEMsRUFBc0RDLFdBQUQsSUFBaUI7QUFDcEVkLE1BQUFBLENBQUMsQ0FBQ1MsSUFBSSxDQUFDTSxHQUFMLEdBQVksbUJBQWIsQ0FBRDs7QUFDQWxCLE1BQUFBLENBQUMsQ0FBQ2dDLGFBQUYsQ0FBZ0JyQixRQUFoQixFQUEwQk0sV0FBMUIsRUFBdUNMLElBQXZDLEVBQTZDTCxPQUE3QztBQUNELEtBSEQ7QUFLQUksSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVvQixJQUFmLENBQW9CakIsR0FBcEIsQ0FBeUIsVUFBekIsRUFBb0MsTUFBTTtBQUN4Q2IsTUFBQUEsQ0FBQyxDQUFDUyxJQUFJLENBQUNNLEdBQUwsR0FBWSxXQUFiLENBQUQ7O0FBQ0FsQixNQUFBQSxDQUFDLENBQUNrQyxLQUFGLENBQVF0QixJQUFSLEVBQWNMLE9BQWQ7O0FBQ0FSLE1BQUFBLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JLLEdBQXhCLENBQTRCUSxJQUFJLENBQUNNLEdBQUwsR0FBWSx5Q0FBeEM7QUFDRCxLQUpEO0FBS0Q7O0FBeENtQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnQGJhYmVsL3BvbHlmaWxsJylcbmNvbnN0IHAgPSByZXF1aXJlKGAuL3BsdWdpblV0aWxgKVxuY29uc3QgdiA9IHAubG9ndlxuY29uc3QgbCA9IHAubG9nXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy5wbHVnaW4udmFyc1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnBsdWdpbi5vcHRpb25zXG4gICAgaWYgKCFjb21waWxlci5ob29rcykge2NvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyk7cmV0dXJufVxuXG4gICAgY29tcGlsZXIuaG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChgZXh0LXRoaXMtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGwodmFycy5hcHAgKyBgSE9PSyB0aGlzQ29tcGlsYXRpb25gKVxuICAgICAgcC5fdGhpc0NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICAgIGlmICh2YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbXBpbGF0aW9uLmVycm9ycy5wdXNoKCBuZXcgRXJyb3IodmFycy5wbHVnaW5FcnJvcnMuam9pbihcIlwiKSkgKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuY29tcGlsYXRpb24udGFwKGBleHQtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGwodmFycy5hcHAgKyBgSE9PSyBjb21waWxhdGlvbmApXG4gICAgICBwLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgbCh2YXJzLmFwcCArIGBIT09LIGVtaXQgKGFzeW5jKWApXG4gICAgICBwLl9lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyQ29tcGlsZS50YXAoJ2V4dC1hZnRlci1jb21waWxlJywgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBsKHZhcnMuYXBwICsgYEhPT0sgYWZ0ZXJDb21waWxlYClcbiAgICAgIHAuX2FmdGVyQ29tcGlsZShjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsICgpID0+IHtcbiAgICAgIGwodmFycy5hcHAgKyBgSE9PSyBkb25lYClcbiAgICAgIHAuX2RvbmUodmFycywgb3B0aW9ucylcbiAgICAgIHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZyh2YXJzLmFwcCArIGBDb21wbGV0ZWQgZXh0LXdlYnBhY2stcGx1Z2luIHByb2Nlc3NpbmdgKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==