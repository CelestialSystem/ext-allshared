'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const p = require(`./pluginUtil`);

const v = p.logv;
const h = p.logh;

class ExtWebpackPlugin {
  constructor(options) {
    this.plugin = p._constructor(options);
  }

  apply(compiler) {
    const vars = this.plugin.vars;
    const options = this.plugin.options;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      h(vars.app + `HOOK thisCompilation`);

      p._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      h(vars.app + `HOOK compilation`);

      p._compilation(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      h(vars.app + `HOOK emit (async)`);

      p._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      h(vars.app + `HOOK afterCompile`);

      p._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.done.tap(`ext-done`, () => {
      h(vars.app + `HOOK done`);

      p._done(vars, options);

      if (vars.buildstep == 0) {
        require('./pluginUtil').log(vars.app + ` Development Build Completed`);
      }

      if (vars.buildstep == 0) {
        require('./pluginUtil').log(vars.app + `Production Build Completed`);
      }
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicCIsInYiLCJsb2d2IiwiaCIsImxvZ2giLCJFeHRXZWJwYWNrUGx1Z2luIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicGx1Z2luIiwiX2NvbnN0cnVjdG9yIiwiYXBwbHkiLCJjb21waWxlciIsInZhcnMiLCJob29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsImFwcCIsIl90aGlzQ29tcGlsYXRpb24iLCJwbHVnaW5FcnJvcnMiLCJsZW5ndGgiLCJlcnJvcnMiLCJwdXNoIiwiRXJyb3IiLCJqb2luIiwiX2NvbXBpbGF0aW9uIiwiZW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJfZW1pdCIsImFmdGVyQ29tcGlsZSIsIl9hZnRlckNvbXBpbGUiLCJkb25lIiwiX2RvbmUiLCJidWlsZHN0ZXAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBQ0FBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFFLGNBQUYsQ0FBakI7O0FBQ0EsTUFBTUUsQ0FBQyxHQUFHRCxDQUFDLENBQUNFLElBQVo7QUFDQSxNQUFNQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0ksSUFBWjs7QUFDZSxNQUFNQyxnQkFBTixDQUF1QjtBQUVwQ0MsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVU7QUFDbkIsU0FBS0MsTUFBTCxHQUFjUixDQUFDLENBQUNTLFlBQUYsQ0FBZUYsT0FBZixDQUFkO0FBQ0Q7O0FBRURHLEVBQUFBLEtBQUssQ0FBQ0MsUUFBRCxFQUFXO0FBQ2QsVUFBTUMsSUFBSSxHQUFHLEtBQUtKLE1BQUwsQ0FBWUksSUFBekI7QUFDQSxVQUFNTCxPQUFPLEdBQUcsS0FBS0MsTUFBTCxDQUFZRCxPQUE1Qjs7QUFDQSxRQUFJLENBQUNJLFFBQVEsQ0FBQ0UsS0FBZCxFQUFxQjtBQUFDQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxlQUFaO0FBQTZCO0FBQU87O0FBRTFESixJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZUcsZUFBZixDQUErQkMsR0FBL0IsQ0FBb0Msc0JBQXBDLEVBQTREQyxXQUFELElBQWlCO0FBQzFFZixNQUFBQSxDQUFDLENBQUNTLElBQUksQ0FBQ08sR0FBTCxHQUFZLHNCQUFiLENBQUQ7O0FBQ0FuQixNQUFBQSxDQUFDLENBQUNvQixnQkFBRixDQUFtQlQsUUFBbkIsRUFBNkJPLFdBQTdCLEVBQTBDTixJQUExQyxFQUFnREwsT0FBaEQ7O0FBQ0EsVUFBSUssSUFBSSxDQUFDUyxZQUFMLENBQWtCQyxNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUNoQ0osUUFBQUEsV0FBVyxDQUFDSyxNQUFaLENBQW1CQyxJQUFuQixDQUF5QixJQUFJQyxLQUFKLENBQVViLElBQUksQ0FBQ1MsWUFBTCxDQUFrQkssSUFBbEIsQ0FBdUIsRUFBdkIsQ0FBVixDQUF6QjtBQUNBO0FBQ0Q7QUFDRixLQVBEO0FBU0FmLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlSyxXQUFmLENBQTJCRCxHQUEzQixDQUFnQyxpQkFBaEMsRUFBbURDLFdBQUQsSUFBaUI7QUFDakVmLE1BQUFBLENBQUMsQ0FBQ1MsSUFBSSxDQUFDTyxHQUFMLEdBQVksa0JBQWIsQ0FBRDs7QUFDQW5CLE1BQUFBLENBQUMsQ0FBQzJCLFlBQUYsQ0FBZWhCLFFBQWYsRUFBeUJPLFdBQXpCLEVBQXNDTixJQUF0QyxFQUE0Q0wsT0FBNUM7QUFDRCxLQUhEO0FBS0FJLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlZSxJQUFmLENBQW9CQyxRQUFwQixDQUE4QixVQUE5QixFQUF5QyxDQUFDWCxXQUFELEVBQWNZLFFBQWQsS0FBMkI7QUFDbEUzQixNQUFBQSxDQUFDLENBQUNTLElBQUksQ0FBQ08sR0FBTCxHQUFZLG1CQUFiLENBQUQ7O0FBQ0FuQixNQUFBQSxDQUFDLENBQUMrQixLQUFGLENBQVFwQixRQUFSLEVBQWtCTyxXQUFsQixFQUErQk4sSUFBL0IsRUFBcUNMLE9BQXJDLEVBQThDdUIsUUFBOUM7QUFDRCxLQUhEO0FBS0FuQixJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZW1CLFlBQWYsQ0FBNEJmLEdBQTVCLENBQWdDLG1CQUFoQyxFQUFzREMsV0FBRCxJQUFpQjtBQUNwRWYsTUFBQUEsQ0FBQyxDQUFDUyxJQUFJLENBQUNPLEdBQUwsR0FBWSxtQkFBYixDQUFEOztBQUNBbkIsTUFBQUEsQ0FBQyxDQUFDaUMsYUFBRixDQUFnQnRCLFFBQWhCLEVBQTBCTyxXQUExQixFQUF1Q04sSUFBdkMsRUFBNkNMLE9BQTdDO0FBQ0QsS0FIRDtBQUtBSSxJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZXFCLElBQWYsQ0FBb0JqQixHQUFwQixDQUF5QixVQUF6QixFQUFvQyxNQUFNO0FBQ3hDZCxNQUFBQSxDQUFDLENBQUNTLElBQUksQ0FBQ08sR0FBTCxHQUFZLFdBQWIsQ0FBRDs7QUFDQW5CLE1BQUFBLENBQUMsQ0FBQ21DLEtBQUYsQ0FBUXZCLElBQVIsRUFBY0wsT0FBZDs7QUFDQSxVQUFJSyxJQUFJLENBQUN3QixTQUFMLElBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCckMsUUFBQUEsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QmdCLEdBQXhCLENBQTRCSCxJQUFJLENBQUNPLEdBQUwsR0FBWSw4QkFBeEM7QUFDRDs7QUFDRCxVQUFJUCxJQUFJLENBQUN3QixTQUFMLElBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCckMsUUFBQUEsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QmdCLEdBQXhCLENBQTRCSCxJQUFJLENBQUNPLEdBQUwsR0FBWSw0QkFBeEM7QUFDRDtBQUNGLEtBVEQ7QUFVRDs7QUE3Q21DIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5yZXF1aXJlKCdAYmFiZWwvcG9seWZpbGwnKVxuY29uc3QgcCA9IHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApXG5jb25zdCB2ID0gcC5sb2d2XG5jb25zdCBoID0gcC5sb2doXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy5wbHVnaW4udmFyc1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnBsdWdpbi5vcHRpb25zXG4gICAgaWYgKCFjb21waWxlci5ob29rcykge2NvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyk7cmV0dXJufVxuXG4gICAgY29tcGlsZXIuaG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChgZXh0LXRoaXMtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGgodmFycy5hcHAgKyBgSE9PSyB0aGlzQ29tcGlsYXRpb25gKVxuICAgICAgcC5fdGhpc0NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICAgIGlmICh2YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbXBpbGF0aW9uLmVycm9ycy5wdXNoKCBuZXcgRXJyb3IodmFycy5wbHVnaW5FcnJvcnMuam9pbihcIlwiKSkgKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuY29tcGlsYXRpb24udGFwKGBleHQtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGgodmFycy5hcHAgKyBgSE9PSyBjb21waWxhdGlvbmApXG4gICAgICBwLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgaCh2YXJzLmFwcCArIGBIT09LIGVtaXQgKGFzeW5jKWApXG4gICAgICBwLl9lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyQ29tcGlsZS50YXAoJ2V4dC1hZnRlci1jb21waWxlJywgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBoKHZhcnMuYXBwICsgYEhPT0sgYWZ0ZXJDb21waWxlYClcbiAgICAgIHAuX2FmdGVyQ29tcGlsZShjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsICgpID0+IHtcbiAgICAgIGgodmFycy5hcHAgKyBgSE9PSyBkb25lYClcbiAgICAgIHAuX2RvbmUodmFycywgb3B0aW9ucylcbiAgICAgIGlmICh2YXJzLmJ1aWxkc3RlcCA9PSAwKSB7XG4gICAgICAgIHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZyh2YXJzLmFwcCArIGAgRGV2ZWxvcG1lbnQgQnVpbGQgQ29tcGxldGVkYClcbiAgICAgIH1cbiAgICAgIGlmICh2YXJzLmJ1aWxkc3RlcCA9PSAwKSB7XG4gICAgICAgIHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZyh2YXJzLmFwcCArIGBQcm9kdWN0aW9uIEJ1aWxkIENvbXBsZXRlZGApXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl19