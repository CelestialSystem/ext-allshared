'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const p = require(`./pluginUtil`);

const v = p.logv;
const l = p.log;

class ExtWebpackPlugin {
  constructor(options) {
    l(vars.app + `constructor`);
    this.plugin = p._constructor(options);
  }

  apply(compiler) {
    const vars = this.plugin.vars;
    const options = this.plugin.options;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      l(vars.app + `thisCompilation`);

      p._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      l(vars.app + `thisCompilation`);

      p._compilation(compiler, compilation, vars, options);
    });
    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      l(vars.app + `emit`);

      p._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      l(vars.app + `afterCompile`);

      p._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.done.tap(`ext-done`, () => {
      l(vars.app + `done`);

      p._done(vars, options);

      require('./pluginUtil').log(vars.app + `Completed ext-webpack-plugin processing`);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwicCIsInYiLCJsb2d2IiwibCIsImxvZyIsIkV4dFdlYnBhY2tQbHVnaW4iLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ2YXJzIiwiYXBwIiwicGx1Z2luIiwiX2NvbnN0cnVjdG9yIiwiYXBwbHkiLCJjb21waWxlciIsImhvb2tzIiwiY29uc29sZSIsInRoaXNDb21waWxhdGlvbiIsInRhcCIsImNvbXBpbGF0aW9uIiwiX3RoaXNDb21waWxhdGlvbiIsInBsdWdpbkVycm9ycyIsImxlbmd0aCIsImVycm9ycyIsInB1c2giLCJFcnJvciIsImpvaW4iLCJfY29tcGlsYXRpb24iLCJlbWl0IiwidGFwQXN5bmMiLCJjYWxsYmFjayIsIl9lbWl0IiwiYWZ0ZXJDb21waWxlIiwiX2FmdGVyQ29tcGlsZSIsImRvbmUiLCJfZG9uZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFDQUEsT0FBTyxDQUFDLGlCQUFELENBQVA7O0FBQ0EsTUFBTUMsQ0FBQyxHQUFHRCxPQUFPLENBQUUsY0FBRixDQUFqQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELENBQUMsQ0FBQ0UsSUFBWjtBQUNBLE1BQU1DLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxHQUFaOztBQUNlLE1BQU1DLGdCQUFOLENBQXVCO0FBRXBDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQkosSUFBQUEsQ0FBQyxDQUFDSyxJQUFJLENBQUNDLEdBQUwsR0FBWSxhQUFiLENBQUQ7QUFDQSxTQUFLQyxNQUFMLEdBQWNWLENBQUMsQ0FBQ1csWUFBRixDQUFlSixPQUFmLENBQWQ7QUFDRDs7QUFFREssRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNTCxJQUFJLEdBQUcsS0FBS0UsTUFBTCxDQUFZRixJQUF6QjtBQUNBLFVBQU1ELE9BQU8sR0FBRyxLQUFLRyxNQUFMLENBQVlILE9BQTVCOztBQUNBLFFBQUksQ0FBQ00sUUFBUSxDQUFDQyxLQUFkLEVBQXFCO0FBQUNDLE1BQUFBLE9BQU8sQ0FBQ1gsR0FBUixDQUFZLGVBQVo7QUFBNkI7QUFBTzs7QUFFMURTLElBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlRSxlQUFmLENBQStCQyxHQUEvQixDQUFvQyxzQkFBcEMsRUFBNERDLFdBQUQsSUFBaUI7QUFDMUVmLE1BQUFBLENBQUMsQ0FBQ0ssSUFBSSxDQUFDQyxHQUFMLEdBQVksaUJBQWIsQ0FBRDs7QUFDQVQsTUFBQUEsQ0FBQyxDQUFDbUIsZ0JBQUYsQ0FBbUJOLFFBQW5CLEVBQTZCSyxXQUE3QixFQUEwQ1YsSUFBMUMsRUFBZ0RELE9BQWhEOztBQUNBLFVBQUlDLElBQUksQ0FBQ1ksWUFBTCxDQUFrQkMsTUFBbEIsR0FBMkIsQ0FBL0IsRUFBa0M7QUFDaENILFFBQUFBLFdBQVcsQ0FBQ0ksTUFBWixDQUFtQkMsSUFBbkIsQ0FBeUIsSUFBSUMsS0FBSixDQUFVaEIsSUFBSSxDQUFDWSxZQUFMLENBQWtCSyxJQUFsQixDQUF1QixFQUF2QixDQUFWLENBQXpCO0FBQ0E7QUFDRDtBQUNGLEtBUEQ7QUFTQVosSUFBQUEsUUFBUSxDQUFDQyxLQUFULENBQWVJLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRWYsTUFBQUEsQ0FBQyxDQUFDSyxJQUFJLENBQUNDLEdBQUwsR0FBWSxpQkFBYixDQUFEOztBQUNBVCxNQUFBQSxDQUFDLENBQUMwQixZQUFGLENBQWViLFFBQWYsRUFBeUJLLFdBQXpCLEVBQXNDVixJQUF0QyxFQUE0Q0QsT0FBNUM7QUFDRCxLQUhEO0FBS0FNLElBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlYSxJQUFmLENBQW9CQyxRQUFwQixDQUE4QixVQUE5QixFQUF5QyxDQUFDVixXQUFELEVBQWNXLFFBQWQsS0FBMkI7QUFDbEUxQixNQUFBQSxDQUFDLENBQUNLLElBQUksQ0FBQ0MsR0FBTCxHQUFZLE1BQWIsQ0FBRDs7QUFDQVQsTUFBQUEsQ0FBQyxDQUFDOEIsS0FBRixDQUFRakIsUUFBUixFQUFrQkssV0FBbEIsRUFBK0JWLElBQS9CLEVBQXFDRCxPQUFyQyxFQUE4Q3NCLFFBQTlDO0FBQ0QsS0FIRDtBQUtBaEIsSUFBQUEsUUFBUSxDQUFDQyxLQUFULENBQWVpQixZQUFmLENBQTRCZCxHQUE1QixDQUFnQyxtQkFBaEMsRUFBc0RDLFdBQUQsSUFBaUI7QUFDcEVmLE1BQUFBLENBQUMsQ0FBQ0ssSUFBSSxDQUFDQyxHQUFMLEdBQVksY0FBYixDQUFEOztBQUNBVCxNQUFBQSxDQUFDLENBQUNnQyxhQUFGLENBQWdCbkIsUUFBaEIsRUFBMEJLLFdBQTFCLEVBQXVDVixJQUF2QyxFQUE2Q0QsT0FBN0M7QUFDRCxLQUhEO0FBS0FNLElBQUFBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlbUIsSUFBZixDQUFvQmhCLEdBQXBCLENBQXlCLFVBQXpCLEVBQW9DLE1BQU07QUFDeENkLE1BQUFBLENBQUMsQ0FBQ0ssSUFBSSxDQUFDQyxHQUFMLEdBQVksTUFBYixDQUFEOztBQUNBVCxNQUFBQSxDQUFDLENBQUNrQyxLQUFGLENBQVExQixJQUFSLEVBQWNELE9BQWQ7O0FBQ0FSLE1BQUFBLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JLLEdBQXhCLENBQTRCSSxJQUFJLENBQUNDLEdBQUwsR0FBWSx5Q0FBeEM7QUFDRCxLQUpEO0FBS0Q7O0FBekNtQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnQGJhYmVsL3BvbHlmaWxsJylcbmNvbnN0IHAgPSByZXF1aXJlKGAuL3BsdWdpblV0aWxgKVxuY29uc3QgdiA9IHAubG9ndlxuY29uc3QgbCA9IHAubG9nXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgbCh2YXJzLmFwcCArIGBjb25zdHJ1Y3RvcmApXG4gICAgdGhpcy5wbHVnaW4gPSBwLl9jb25zdHJ1Y3RvcihvcHRpb25zKVxuICB9XG5cbiAgYXBwbHkoY29tcGlsZXIpIHtcbiAgICBjb25zdCB2YXJzID0gdGhpcy5wbHVnaW4udmFyc1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnBsdWdpbi5vcHRpb25zXG4gICAgaWYgKCFjb21waWxlci5ob29rcykge2NvbnNvbGUubG9nKCdub3Qgd2VicGFjayA0Jyk7cmV0dXJufVxuXG4gICAgY29tcGlsZXIuaG9va3MudGhpc0NvbXBpbGF0aW9uLnRhcChgZXh0LXRoaXMtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGwodmFycy5hcHAgKyBgdGhpc0NvbXBpbGF0aW9uYClcbiAgICAgIHAuX3RoaXNDb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgICBpZiAodmFycy5wbHVnaW5FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb21waWxhdGlvbi5lcnJvcnMucHVzaCggbmV3IEVycm9yKHZhcnMucGx1Z2luRXJyb3JzLmpvaW4oXCJcIikpIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmNvbXBpbGF0aW9uLnRhcChgZXh0LWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICBsKHZhcnMuYXBwICsgYHRoaXNDb21waWxhdGlvbmApXG4gICAgICBwLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmVtaXQudGFwQXN5bmMoYGV4dC1lbWl0YCwgKGNvbXBpbGF0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgICAgbCh2YXJzLmFwcCArIGBlbWl0YClcbiAgICAgIHAuX2VtaXQoY29tcGlsZXIsIGNvbXBpbGF0aW9uLCB2YXJzLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuYWZ0ZXJDb21waWxlLnRhcCgnZXh0LWFmdGVyLWNvbXBpbGUnLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIGwodmFycy5hcHAgKyBgYWZ0ZXJDb21waWxlYClcbiAgICAgIHAuX2FmdGVyQ29tcGlsZShjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmRvbmUudGFwKGBleHQtZG9uZWAsICgpID0+IHtcbiAgICAgIGwodmFycy5hcHAgKyBgZG9uZWApXG4gICAgICBwLl9kb25lKHZhcnMsIG9wdGlvbnMpXG4gICAgICByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2codmFycy5hcHAgKyBgQ29tcGxldGVkIGV4dC13ZWJwYWNrLXBsdWdpbiBwcm9jZXNzaW5nYClcbiAgICB9KVxuICB9XG59XG4iXX0=