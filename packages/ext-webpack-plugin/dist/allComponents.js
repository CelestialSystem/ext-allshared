"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const componentList = ['ext-actionsheet', 'ext-audio', 'ext-button', 'ext-calendar-event', 'ext-calendar-form-add', 'ext-calendar-calendar-picker', 'ext-calendar-form-edit', 'ext-calendar-timefield', 'ext-calendar-daysheader', 'ext-calendar-weeksheader', 'ext-calendar-list', 'ext-calendar-day', 'ext-calendar-days', 'ext-calendar-month', 'ext-calendar', 'ext-calendar-week', 'ext-calendar-weeks', 'ext-calendar-dayview', 'ext-calendar-daysview', 'ext-calendar-monthview', 'ext-calendar-multiview', 'ext-calendar-weekview', 'ext-calendar-weeksview', 'ext-carousel', 'ext-axis3d', 'ext-cartesian', 'ext-chart', 'ext-interaction', 'ext-legend', 'ext-chartnavigator', 'ext-polar', 'ext-spacefilling', 'ext-chip', 'ext-component', 'ext-container', 'ext-d3-canvas', 'ext-d3-heatmap', 'ext-d3-pack', 'ext-d3-partition', 'ext-d3-sunburst', 'ext-d3-tree', 'ext-d3-horizontal-tree', 'ext-d3-treemap', 'ext-d3-svg', 'ext-d3', 'ext-boundlist', 'ext-chipview', 'ext-componentdataview', 'ext-dataitem', 'ext-dataview', 'ext-emptytext', 'ext-indexbar', 'ext-itemheader', 'ext-list', 'ext-listitem', 'ext-listswiperitem', 'ext-listswiperstepper', 'ext-nestedlist', 'ext-pullrefreshbar', 'ext-pullrefreshspinner', 'ext-simplelistitem', 'ext-dialog', 'ext-window', 'ext-draw', 'ext-surface', 'ext-editor', 'ext-checkbox', 'ext-checkboxfield', 'ext-combobox', 'ext-comboboxfield', 'ext-containerfield', 'ext-fieldcontainer', 'ext-datefield', 'ext-datepickerfield', 'ext-datepickernativefield', 'ext-displayfield', 'ext-emailfield', 'ext-field', 'ext-filefield', 'ext-filebutton', 'ext-hiddenfield', 'ext-inputfield', 'ext-numberfield', 'ext-fieldpanel', 'ext-passwordfield', 'ext-pickerfield', 'ext-radio', 'ext-radiofield', 'ext-searchfield', 'ext-selectfield', 'ext-singlesliderfield', 'ext-sliderfield', 'ext-spinnerfield', 'ext-textfield', 'ext-textareafield', 'ext-timefield', 'ext-togglefield', 'ext-cleartrigger', 'ext-datetrigger', 'ext-expandtrigger', 'ext-menutrigger', 'ext-revealtrigger', 'ext-spindowntrigger', 'ext-spinuptrigger', 'ext-timetrigger', 'ext-trigger', 'ext-urlfield', 'ext-fieldset', 'ext-formpanel', 'ext-gridcellbase', 'ext-booleancell', 'ext-gridcell', 'ext-checkcell', 'ext-datecell', 'ext-numbercell', 'ext-rownumberercell', 'ext-textcell', 'ext-treecell', 'ext-widgetcell', 'ext-celleditor', 'ext-booleancolumn', 'ext-checkcolumn', 'ext-gridcolumn', 'ext-column', 'ext-templatecolumn', 'ext-datecolumn', 'ext-numbercolumn', 'ext-rownumberer', 'ext-selectioncolumn', 'ext-textcolumn', 'ext-treecolumn', 'ext-grid', 'ext-headercontainer', 'ext-lockedgrid', 'ext-lockedgridregion', 'ext-gridcolumnsmenu', 'ext-gridgroupbythismenuitem', 'ext-gridshowingroupsmenuitem', 'ext-gridsortascmenuitem', 'ext-gridsortdescmenuitem', 'ext-pagingtoolbar', 'ext-gridrow', 'ext-rowbody', 'ext-rowheader', 'ext-gridsummaryrow', 'ext-tree', 'ext-image', 'ext-img', 'ext-indicator', 'ext-label', 'ext-treelist', 'ext-treelistitem', 'ext-loadmask', 'ext-mask', 'ext-media', 'ext-menucheckitem', 'ext-menuitem', 'ext-menu', 'ext-menuradioitem', 'ext-menuseparator', 'ext-messagebox', 'ext-navigationview', 'ext-panel', 'ext-datepanel', 'ext-datetitle', 'ext-panelheader', 'ext-timepanel', 'ext-paneltitle', 'ext-yearpicker', 'ext-datepicker', 'ext-picker', 'ext-selectpicker', 'ext-pickerslot', 'ext-tabletpicker', 'ext-pivotgridcell', 'ext-pivotgridgroupcell', 'ext-pivotd3container', 'ext-pivotheatmap', 'ext-pivottreemap', 'ext-pivotgrid', 'ext-pivotconfigfield', 'ext-pivotconfigcontainer', 'ext-pivotconfigform', 'ext-pivotconfigpanel', 'ext-pivotsettings', 'ext-pivotrangeeditor', 'ext-pivotgridrow', 'ext-progress', 'ext-progressbarwidget', 'ext-segmentedbutton', 'ext-sheet', 'ext-slider', 'ext-thumb', 'ext-toggleslider', 'ext-spacer', 'ext-sparklinebar', 'ext-sparkline', 'ext-sparklinebox', 'ext-sparklinebullet', 'ext-sparklinediscrete', 'ext-sparklineline', 'ext-sparklinepie', 'ext-sparklinetristate', 'ext-splitbutton', 'ext-tabbar', 'ext-tabpanel', 'ext-tab', 'ext-tooltip', 'ext-title', 'ext-titlebar', 'ext-tool', 'ext-paneltool', 'ext-toolbar', 'ext-colorbutton', 'ext-colorpickercolorpreview', 'ext-colorfield', 'ext-colorselector', 'ext-gauge', 'ext-map', 'ext-google-map', 'ext-rating', 'ext-video', 'ext-viewport', 'ext-widget'];
var _default = componentList;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,